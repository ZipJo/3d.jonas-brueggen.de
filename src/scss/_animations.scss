// _animations.scss

@use "sass:math";
@use 'variables';


$cb_quarter-sine: cubic-bezier(.4,.63,.67,1);
$cb_quarter-cos: cubic-bezier(.33,0,.6,.37);


/* main perspective animations */
.wrapper {
	$animationDuration: 5s;
	$perspective: 10vw; // defines the z=0 plane with width and height at 100% as the frustum near plane

	$maxRotation: 45deg; // max Object rotation
	$rotationRatio: 10; // to fix perspective-skew. this is an estimate, css-perspective is weird!
	$maxRotationCss: $maxRotation / $rotationRatio;

	$pushback: -5vw; // depth for the initial "pushback"-effect on section-inactivity. roughly 1/8th of maxDistanceZ

	$maxDistanceX: 255vw; // distance from left at 90°
	$maxDistanceZ: -40vw; // depth at 90° excluding pushback!

	//mixin for the keyframe-animation:
	@mixin section-animation( $name, $maxRot, $maxRotCss ) {
		@keyframes #{$name} {
			0% {
				max-height: 100vh;
				$left: math.sin($maxRot) * $maxDistanceX;
				$translateZ: $pushback + (1 - math.cos($maxRot)) * $maxDistanceZ;

				left: $left;
				transform: rotateY($maxRotCss) translateZ($translateZ);
			}
			80% {
				max-height: 100vh;
				transform: rotateY(0deg) translateZ($pushback);
			}
			85% {
				transform: rotateY(0deg) translateZ($pushback * math.sin(math.$pi * 3 / 8));
			}
			90% {
				transform: rotateY(0deg) translateZ($pushback * math.sin(math.$pi * 2 / 8));
				left: 0;
			}
			95% {
				transform: rotateY(0deg) translateZ($pushback * math.sin(math.$pi * 1 / 8));
				//animation-timing-function: ease-out;
			}
			100% {
				max-height: 500vh;
				left: 0;
				transform: rotateY(0deg) translateZ(0);
			}
		}
	}
	//actual animations:
	@include section-animation(section-rightToCenter--animation, $maxRotation, $maxRotationCss);
	@include section-animation(section-leftToCenter--animation, -$maxRotation, -$maxRotationCss);

	@keyframes section-fromHome--animation {
		0% {
			top: 50vh;
			opacity: 0;
			max-height: 49vh;
		}
		100% {
			top: 0;
			opacity: 1;
			max-height: 100vh;
		}
	}
	@keyframes section-toHome--animation {
		0% {
			top: 0;
			opacity: 1;
			max-height: 100vh;
		}
		100% {
			top: 50vh;
			opacity: 0;
			max-height: 49vh;
		}
	}


	overflow-x: hidden;
	perspective: $perspective;
	transform-style: preserve-3d;
	height: 100vh;
	width: 100vw;

	section {
		pointer-events:none;

		$lr_padding: 5vw;
		box-shadow:inset 0 0 0 1px darkred;

		width: 100vw - 2 * $lr_padding;
		
		padding:0 $lr_padding 0;

		position: fixed;
		top: 0;

		overflow-y: hidden;


		//animation-stuff - default states (inactive):
		$translateZ: $pushback + (1 - math.cos($maxRotation)) * $maxDistanceZ;
		$left: math.sin($maxRotation) * $maxDistanceX;

		max-height: 100vh;		

		left: $left;
		transform: rotateY($maxRotationCss) translateZ($translateZ);

		transform-origin: 50vw 50vh 0; //this is very different form 50% 50% 0!!!

		animation-duration: $animationDuration;
		animation-iteration-count: 1;
		animation-timing-function: linear;

		transition: max-height $animationDuration ease-in-out;

		&.active {
			max-height: 500vh;
			left: 0;
			transform: rotateY(0deg) translateZ(0);
			//toActive-Animations:
			&.rightToCenter {
				animation-name: section-rightToCenter--animation;
			}
			&.leftToCenter {
				animation-name: section-leftToCenter--animation;
			}
		}
		&.centerToRight {
			animation-direction: reverse;
			animation-name: section-rightToCenter--animation;
		}
		&.centerToLeft {
			animation-direction: reverse;
			animation-name: section-leftToCenter--animation;
		}
		&.toHome {
			left: 0;
			transform: rotateY(0deg) translateZ(0);
			top: 50vh;
			opacity: 0;
			max-height: 49vh;

			animation-name: section-toHome--animation;
			animation-timing-function: ease-in-out;
		}
		&.fromHome {
			animation-name: section-fromHome--animation;
			animation-timing-function: ease-in-out;
		}
	}
	
	header {
		top: 50vh;
		transform: translateY(-50%);
		transition: top $animationDuration ease-in-out, transform $animationDuration ease-in-out;

		.header_logo {
			transform: rotateY(360deg);
			transition: transform $animationDuration ease-in-out;
		}
		nav {
			opacity: 0;
			visibility: hidden;
			transition: opacity $animationDuration ease-in-out, visibility $animationDuration ease-in-out;
		}

		&.top {
			top: 0;
			transform: translateY(0);
			
			.header_logo { transform: rotateY(0); }
			nav { opacity: 1; visibility: visible; }
		}
	}
}


/* everything popup-related */

.popup_container {
	position: fixed;
	display: flex;
	justify-content: center;
	align-items: center;
	padding: 1%;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	opacity: 0;
	pointer-events: none;
	background: variables.$color-page-main-opaque;
	transition: opacity 0.2s;
	z-index: 1000;
}
.popup_container.active {
	opacity: 1;
	pointer-events: all;
}

.popup_container > div {
	transform: translateY(-60px);
	background: variables.$color-page-bg;
	opacity: 0;
	max-height: 85%;
	padding: 50px;
	box-shadow: 0px 1px 10px 0px rgba(0,0,0,0.3);
	transition: all 0.3s ease-in-out;
	overflow-y: auto;
}
.popup_container > div.move {
	transform: translateY(0);
	opacity: 1;
}

/* contact_tiles animation */
.contact_tiles_grid a {
}
.contact_tiles_grid > a:nth-child(1) { animation-delay: 0s; }
.contact_tiles_grid > a:nth-child(2) { animation-delay: 0.1s; }
.contact_tiles_grid > a:nth-child(3) { animation-delay: 0.2s; }
.contact_tiles_grid > a:nth-child(4) { animation-delay: 0.3s; }

.contact_tiles_grid.start_animation a {
	animation-name: contact_tiles--animation;
	animation-duration: 0.8s;
	animation-timing-function: ease-out;
	animation-iteration-count: 1;
}

@keyframes contact_tiles--animation {
	from { transform: translateX(0%); }
	20% { transform: translateX(-20%); }
	to { transform: translateX(0%); }
}