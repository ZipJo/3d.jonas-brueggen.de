// _animations.scss

@use "sass:math";
@use 'variables';


$cb_quarter-sin: cubic-bezier(.4,.63,.67,1); //ease-out
$cb_quarter-cos: cubic-bezier(.33,0,.6,.37); //ease-in


/* main perspective animations */
.wrapper {
	$homeHeight: 170px; //logo-height+nav-height

	$animationDurationHome: .8s;
	$animationDurationSection: .5s;
	$perspective: 10vw; // defines the z=0 plane with width and height at 100% as the frustum near plane

	$maxRotation: 35deg; // max Object rotation
	$rotationRatio: 4; // to fix perspective-skew. this is an estimate, css-perspective is weird!
	$maxRotationCss: $maxRotation / $rotationRatio;

	$pushback: -5vw; // depth for the initial "pushback"-effect on section-inactivity. roughly 1/8th of maxDistanceZ

	$maxDistanceX: 255vw; // distance from left at 90°
	$maxDistanceZ: -40vw; // depth at 90° excluding pushback!

	//mixin for the keyframe-animation:
	@mixin section-animation( $name, $dir, $maxRot, $maxRotCss ) {
		@if $dir == in {
			//from back to front
			@keyframes #{$name}-height-opacity {
				from {
					max-height: 50vh;
					opacity: 0;
				}
				60% {
					max-height: 100vh;
				}
				to {
					max-height: 500vh;
					opacity: 1;
				}
			}
			@keyframes #{$name}-left {
				from {
					$left: math.sin($maxRot) * $maxDistanceX;
					left: $left;
					animation-timing-function: $cb_quarter-cos;
				}
				60% {
					$left: math.sin($maxRot * .4) * $maxDistanceX;
					left: $left;
					animation-timing-function: $cb_quarter-sin;
				}
				to {
					left: 0;
				}
			}
			@keyframes #{$name}-transform {
				from {
					$translateZ: $pushback + (1 - math.cos($maxRot)) * $maxDistanceZ;
					transform: rotateY($maxRotCss) translateZ($translateZ);
					animation-timing-function: $cb_quarter-sin;
				}
				60% {
					transform: rotateY(0deg) translateZ($pushback);
					animation-timing-function: $cb_quarter-cos;
				}
				to {
					transform: rotateY(0deg) translateZ(0);
				}
			}

		} @else {
			//from front to back
			@keyframes #{$name}-height-opacity {
				from {
					max-height: 500vh;
					opacity: 1;
				}
				40% {
					max-height: 100vh;
				}
				to {
					max-height: 50vh;
					opacity: 0;
				}
			}
			@keyframes #{$name}-left {
				from {
					left: 0;
					animation-timing-function: $cb_quarter-cos;
				}
				40% {
					$left: math.sin($maxRot * .4) * $maxDistanceX;
					left: $left;
					animation-timing-function: $cb_quarter-sin;
				}
				to {
					$left: math.sin($maxRot) * $maxDistanceX;
					left: $left;
				}
			}
			@keyframes #{$name}-transform {
				from {
					transform: rotateY(0deg) translateZ(0);
					animation-timing-function: $cb_quarter-sin;
				}
				40% {
					transform: rotateY(0deg) translateZ($pushback);
					animation-timing-function: $cb_quarter-cos;
				}
				to {
					$translateZ: $pushback + (1 - math.cos($maxRot)) * $maxDistanceZ;
					transform: rotateY($maxRotCss) translateZ($translateZ);
				}
			}

		}
	}
	//actual animations:
	@include section-animation(section-rightToCenter--animation, in, $maxRotation, $maxRotationCss);
	@include section-animation(section-leftToCenter--animation, in, -$maxRotation, -$maxRotationCss);
	@include section-animation(section-centerToRight--animation, out, $maxRotation, $maxRotationCss);
	@include section-animation(section-centerToLeft--animation, out, -$maxRotation, -$maxRotationCss);

	@keyframes section-fromHome--animation {
		0% {
			top: 60vh;
			opacity: 0;
			max-height: 39vh;
		}
		100% {
			top: $homeHeight;
			opacity: 1;
			max-height: 100vh;
		}
	}
	@keyframes section-toHome--animation {
		0% {
			top: $homeHeight;
			opacity: 1;
			max-height: 100vh;
		}
		100% {
			top: 60vh;
			opacity: 0;
			max-height: 39vh;
		}
	}


	overflow-x: hidden;
	perspective: $perspective;
	transform-style: preserve-3d;
	height: 100vh;
	width: 100vw;

	section {
		will-change: top, left, transform, opacity, max-height;

		top: $homeHeight;

		pointer-events:none;

		//animation-stuff - default states (inactive):
		$translateZ: $pushback + (1 - math.cos($maxRotation)) * $maxDistanceZ;
		$left: math.sin($maxRotation) * $maxDistanceX;

		max-height: 50vh;
		opacity: 0;

		left: $left;
		transform: rotateY($maxRotationCss) translateZ($translateZ);

		transform-origin: 50vw 50vh 0; //this is very different form 50% 50% 0!!!

		animation-iteration-count: 1;

		transition: max-height $animationDurationSection ease-in-out;

		&.active {
			pointer-events: all;
			max-height: 500vh;
			opacity: 1;
			left: 0;
			transform: rotateY(0deg) translateZ(0);
			//toActive-Animations:
			&.rightToCenter {
				animation-duration: $animationDurationSection;
				animation-name: section-rightToCenter--animation-height-opacity, section-rightToCenter--animation-left, section-rightToCenter--animation-transform;
			}
			&.leftToCenter {
				animation-duration: $animationDurationSection;
				animation-name: section-leftToCenter--animation-height-opacity, section-leftToCenter--animation-left, section-leftToCenter--animation-transform;
			}
		}
		&.centerToRight {
			animation-duration: $animationDurationSection;
			animation-name: section-centerToRight--animation-height-opacity, section-centerToRight--animation-left, section-centerToRight--animation-transform;
		}
		&.centerToLeft {
			animation-duration: $animationDurationSection;
			animation-name: section-centerToLeft--animation-height-opacity, section-centerToLeft--animation-left, section-centerToLeft--animation-transform;
		}
		&.toHome {
			left: 0;
			transform: rotateY(0deg) translateZ(0);
			top: 70vh;
			opacity: 0;
			max-height: 29vh;

			animation-duration: $animationDurationHome;
			animation-name: section-toHome--animation;
			animation-timing-function: ease-in-out;
		}
		&.fromHome {
			animation-duration: $animationDurationHome;
			animation-name: section-fromHome--animation;
			animation-timing-function: ease-in-out;
		}
	}

	header {
		will-change: transform, top;
		top: 50vh;
		transform: translateY(-50%);
		transition: top $animationDurationHome ease-in-out, transform $animationDurationHome ease-in-out;

		.header_logo {
			will-change: transform;
			transform: rotateY(360deg);
			transition: transform $animationDurationHome ease-in-out;
		}
		.logo_subtext {
			will-change: opacity, visibility;
			opacity: 1;
			visibility: visible;
			transition: all $animationDurationHome*.7 ease-in-out $animationDurationHome*.3;
		}
		nav {
			will-change: opacity, visibility;
			opacity: 0;
			visibility: hidden;
			transition: all $animationDurationHome*.7 ease-in-out 0s;
		}
		@keyframes enter--animation {
			50% { transform: translateX(-50%) scale(1.05); }
		}
		.enter {
			will-change: transform, opacity;
			opacity: 0;
			animation-name: enter--animation;
			animation-iteration-count: infinite;
			animation-duration: 3s;
			animation-timing-function: ease-in-out;
			transition: opacity $animationDurationHome/2 ease-in-out;
			visibility: hidden;
			&.visible {
				visibility: visible;
				opacity: 1;
				transition: opacity 3s ease-in-out;
			}
		}

		&.top {
			top: 0;
			transform: translateY(0);

			.header_logo { transform: rotateY(0); }
			.logo_subtext { opacity: 0;	visibility: hidden; transition: all $animationDurationHome*.7 ease-in-out 0s; }
			nav { opacity: 1; visibility: visible; transition: all $animationDurationHome*.7 ease-in-out $animationDurationHome*.3; }
		}
	}



	/* section specific animations */

	section.projects {
		&.toHome .project {
			animation-name: project-out--animation;
			animation-duration: 1s;
			animation-fill-mode: both;
			animation-delay: 0s;
		}

		&.fromHome.active .project {
			animation-name: project-in--animation;
			animation-duration: 1s;
			animation-fill-mode: both;
			@for $i from 1 through 10 {
				&:nth-child(#{$i}) { animation-delay: calc(.5s + (.1s * #{$i})); }
			}
		}

		@keyframes project-in--animation {
			from {
				transform: translateX(-100%);
			}
			to {
				transform: translateX(0);
			  }
		}
		@keyframes project-out--animation {
			from {
				transform: translateX(0);
			}
			to {
				transform: translateX(-100%);
			  }
		}

		.project {
			will-change: transform;

			$move_dur: 60s;
			$move_dur_mod: 5s;

			@for $i from 1 through 10 {
				&:nth-child(#{$i}) .cover {
					animation-delay: calc( -#{($move_dur + $move_dur_mod) * 2} * var(--rnd-1) );
					animation-duration: calc( #{$move_dur} + ( #{$move_dur_mod} * var(--rnd-2) ) );
				}
			}

			.cover {
				will-change: transform;
				
				
				animation-name: cover-move--animation;
				animation-iteration-count: infinite;
				animation-direction: alternate;
				animation-timing-function: cubic-bezier(.25,0,.75,1);
				
				@keyframes cover-move--animation {
					from { transform: translateX(0); }
					to   { transform: translateX(-30%); }
				}

				&.active {
					transition: transform 0.4s cubic-bezier(.4,0,.35,1.35);
				}

				$arrow_indent: 15px;
				
				&:before {
					will-change: clip-path, opacity;
					content:'';
					height: 100%;
					width: 100%;
					position: absolute;
					left: 0;
					$width: 100%;

					clip-path: polygon(0 0, $width 0, $width calc(50% - #{$arrow_indent}), calc(#{$width} - #{$arrow_indent})  50%, $width calc(50% + #{$arrow_indent}), $width 100%, 0 100%);
					transition: clip-path 0.4s cubic-bezier(.4,0,.35,1.35);
					opacity: 1;

				}

				&:hover:before {
					$width: calc(100% - 120px);
					clip-path: polygon(0 0, $width 0, $width calc(50% - #{$arrow_indent}), calc(#{$width} - #{$arrow_indent})  50%, $width calc(50% + #{$arrow_indent}), $width 100%, 0 100%);
					transition: clip-path 0.4s cubic-bezier(.4,0,.35,1.35);
				}

				&.active:before {
					opacity: 0;
					$width: 0%;
					clip-path: polygon(0 0, $width 0, $width calc(50% - #{$arrow_indent}), calc(#{$width} - #{$arrow_indent})  50%, $width calc(50% + #{$arrow_indent}), $width 100%, 0 100%);
					transition: clip-path 0.5s cubic-bezier(.4,-0.4,.58,1), opacity 0.2s ease-in-out 0.3s;
				}

				&.fromActive:before {
					$width: calc(100%);
					clip-path: polygon(0 0, $width 0, $width calc(50% - #{$arrow_indent}), calc(#{$width} - #{$arrow_indent})  50%, $width calc(50% + #{$arrow_indent}), $width 100%, 0 100%);
					transition: clip-path 0.6s cubic-bezier(.4,0,.60,1.25), opacity 0.5s ease-in-out 0.1s;
				}

			}

			.details {
				will-change: max-height, padding;
				max-height: 0;
				overflow-y: hidden;
				transition: max-height 0.4s ease-in-out, padding 0.4s ease-in-out;
			}

			.cover.active ~ .details {
				transition: max-height 0.3s ease-in-out 0.35s, padding 0.3s ease-in-out 0.35s;
			}
		}
	}
}


/* everything popup-related */

.popup_container {
	will-change: opacity;
	position: fixed;
	display: flex;
	justify-content: center;
	align-items: center;
	padding: 1%;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	opacity: 0;
	pointer-events: none;
	background: variables.$color-page-main-opaque;
	transition: opacity 0.2s;
	z-index: 1000;

	&.active {
		opacity: 1;
		pointer-events: all;
	}

	> div {
		will-change: transform, opacity;
		transform: translateY(-60px);
		background: variables.$color-page-bg;
		opacity: 0;
		max-height: 85%;
		padding: 50px;
		box-shadow: 0px 1px 10px 0px rgba(0,0,0,0.3);
		transition: all 0.3s ease-in-out;
		overflow-y: auto;
		
		&.move {
			transform: translateY(0);
			opacity: 1;
		}
	}
}

/* contact_tiles animation */
.contact_tiles_grid {
	a:nth-child(1) { animation-delay: 0s; }
	a:nth-child(2) { animation-delay: 0.1s; }
	a:nth-child(3) { animation-delay: 0.2s; }
	a:nth-child(4) { animation-delay: 0.3s; }
	
	&.start_animation a {
		animation-name: contact_tiles--animation;
		animation-duration: 0.8s;
		animation-timing-function: ease-out;
		animation-iteration-count: 1;
	}
}

@keyframes contact_tiles--animation {
	from { transform: translateX(0%); }
	20% { transform: translateX(-20%); }
	to { transform: translateX(0%); }
}